/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: esp_hosted_config.proto */

#ifndef PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED
#define PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _EspHostedCmdGetMacAddress EspHostedCmdGetMacAddress;
typedef struct _EspHostedRespGetMacAddress EspHostedRespGetMacAddress;
typedef struct _EspHostedCmdGetMode EspHostedCmdGetMode;
typedef struct _EspHostedRespGetMode EspHostedRespGetMode;
typedef struct _EspHostedCmdSetMode EspHostedCmdSetMode;
typedef struct _EspHostedRespSetMode EspHostedRespSetMode;
typedef struct _EspHostedCmdGetStatus EspHostedCmdGetStatus;
typedef struct _EspHostedRespGetStatus EspHostedRespGetStatus;
typedef struct _EspHostedCmdSetMacAddress EspHostedCmdSetMacAddress;
typedef struct _EspHostedRespSetMacAddress EspHostedRespSetMacAddress;
typedef struct _EspHostedCmdGetAPConfig EspHostedCmdGetAPConfig;
typedef struct _EspHostedRespGetAPConfig EspHostedRespGetAPConfig;
typedef struct _EspHostedCmdSetAPConfig EspHostedCmdSetAPConfig;
typedef struct _EspHostedRespSetAPConfig EspHostedRespSetAPConfig;
typedef struct _EspHostedCmdGetSoftAPConfig EspHostedCmdGetSoftAPConfig;
typedef struct _EspHostedRespGetSoftAPConfig EspHostedRespGetSoftAPConfig;
typedef struct _EspHostedCmdSetSoftAPConfig EspHostedCmdSetSoftAPConfig;
typedef struct _EspHostedRespSetSoftAPConfig EspHostedRespSetSoftAPConfig;
typedef struct _EspHostedScanResult EspHostedScanResult;
typedef struct _EspHostedCmdScanResult EspHostedCmdScanResult;
typedef struct _EspHostedRespScanResult EspHostedRespScanResult;
typedef struct _EspHostedConnectedSTAList EspHostedConnectedSTAList;
typedef struct _EspHostedCmdConnectedSTA EspHostedCmdConnectedSTA;
typedef struct _EspHostedRespConnectedSTA EspHostedRespConnectedSTA;
typedef struct _EspHostedCmdOTABegin EspHostedCmdOTABegin;
typedef struct _EspHostedRespOTABegin EspHostedRespOTABegin;
typedef struct _EspHostedCmdOTAWrite EspHostedCmdOTAWrite;
typedef struct _EspHostedRespOTAWrite EspHostedRespOTAWrite;
typedef struct _EspHostedCmdOTAEnd EspHostedCmdOTAEnd;
typedef struct _EspHostedRespOTAEnd EspHostedRespOTAEnd;
typedef struct _EspHostedCmdSetVendorSpecificIE EspHostedCmdSetVendorSpecificIE;
typedef struct _EspHostedRespSetVendorSpecificIE EspHostedRespSetVendorSpecificIE;
typedef struct _EspHostedCmdSetWiFiMAXTXPower EspHostedCmdSetWiFiMAXTXPower;
typedef struct _EspHostedRespSetWiFiMAXTXPower EspHostedRespSetWiFiMAXTXPower;
typedef struct _EspHostedCmdGetWiFiCurrTXPower EspHostedCmdGetWiFiCurrTXPower;
typedef struct _EspHostedRespGetWiFiCurrTXPower EspHostedRespGetWiFiCurrTXPower;
typedef struct _EspHostedConfigPayload EspHostedConfigPayload;
typedef struct _EspHostedCmdGetMadMachinePriv EspHostedCmdGetMadMachinePriv;
typedef struct _EspHostedRespGetMadMachinePriv EspHostedRespGetMadMachinePriv;
typedef struct _EspHostedCmdSetMadMachinePriv EspHostedCmdSetMadMachinePriv;
typedef struct _EspHostedRespSetMadMachinePriv EspHostedRespSetMadMachinePriv;



/* --- enums --- */

typedef enum _EspHostedMadMachinePrivType {
  ESP_HOSTED_MADMACHINE_PRIV_TYPE__Type_RECV = 0,
  ESP_HOSTED_MADMACHINE_PRIV_TYPE__Type_LED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESP_HOSTED_MADMACHINEPRIV_TYPE)
} EspHostedMadMachinePrivType;


typedef enum _EspHostedEncryptionMode {
  ESP_HOSTED_ENCRYPTION_MODE__Type_Open = 0,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WEP = 1,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA_PSK = 2,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA2_PSK = 3,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA_WPA2_PSK = 4,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA2_ENTERPRISE = 5,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA3_PSK = 6,
  ESP_HOSTED_ENCRYPTION_MODE__Type_WPA2_WPA3_PSK = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESP_HOSTED_ENCRYPTION_MODE)
} EspHostedEncryptionMode;
typedef enum _EspHostedStatus {
  ESP_HOSTED_STATUS__TYPE_CONNECTED = 0,
  ESP_HOSTED_STATUS__TYPE_NOT_CONNECTED = 1,
  ESP_HOSTED_STATUS__TYPE_NO_AP_FOUND = 2,
  ESP_HOSTED_STATUS__TYPE_CONNECTION_FAIL = 3,
  ESP_HOSTED_STATUS__TYPE_INVALID_ARGUMET = 4,
  ESP_HOSTED_STATUS__TYPE_OUT_OF_RANGE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESP_HOSTED_STATUS)
} EspHostedStatus;
typedef enum _EspHostedVendorIEType {
  ESP_HOSTED_VENDOR_IETYPE__VND_IE_TYPE_BEACON = 0,
  ESP_HOSTED_VENDOR_IETYPE__VND_IE_TYPE_PROBE_REQ = 1,
  ESP_HOSTED_VENDOR_IETYPE__VND_IE_TYPE_PROBE_RESP = 2,
  ESP_HOSTED_VENDOR_IETYPE__VND_IE_TYPE_ASSOC_REQ = 3,
  ESP_HOSTED_VENDOR_IETYPE__VND_IE_TYPE_ASSOC_RESP = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESP_HOSTED_VENDOR_IETYPE)
} EspHostedVendorIEType;
typedef enum _EspHostedIEID {
  ESP_HOSTED_IEID__VND_IE_ID_0 = 0,
  ESP_HOSTED_IEID__VND_IE_ID_1 = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESP_HOSTED_IEID)
} EspHostedIEID;
typedef enum _EspHostedConfigMsgType {
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetMACAddress = 0,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetMACAddress = 1,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetWiFiMode = 2,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetWiFiMode = 3,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetWiFiMode = 4,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetWiFiMode = 5,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetAPConfig = 6,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetAPConfig = 7,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetAPConfig = 8,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetAPConfig = 9,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetSoftAPConfig = 10,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetSoftAPConfig = 11,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetSoftAPConfig = 12,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetSoftAPConfig = 13,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdDisconnectAP = 14,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespDisconnectAP = 15,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdStopSoftAP = 16,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespStopSoftAP = 17,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetAPScanList = 18,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetAPScanList = 19,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetConnectedSTAList = 20,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetConnectedSTAList = 21,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetMacAddress = 22,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetMacAddress = 23,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetPowerSaveMode = 24,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetPowerSaveMode = 25,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetPowerSaveMode = 26,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetPowerSaveMode = 27,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdOTABegin = 28,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespOTABegin = 29,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdOTAWrite = 30,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespOTAWrite = 31,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdOTAEnd = 32,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespOTAEnd = 33,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetVendorSpecificIE = 34,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetVendorSpecificIE = 35,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetWiFiMAXTXPower = 36,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetWiFiMAXTXPower = 37,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetWiFiCurrTXPower = 38,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetWiFiCurrTXPower = 39,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetMadMachinePriv = 40,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetMadMachinePriv = 41,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetMadMachinePriv = 42,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespMadMachinePriv = 43
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESP_HOSTED_CONFIG_MSG_TYPE)
} EspHostedConfigMsgType;

/* --- messages --- */

struct  _EspHostedCmdGetMacAddress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mode;
  int32_t mode;
};
#define ESP_HOSTED_CMD_GET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_get_mac_address__descriptor) \
    , 0,0 }


struct  _EspHostedRespGetMacAddress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mac;
  ProtobufCBinaryData mac;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_GET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_get_mac_address__descriptor) \
    , 0,{0,NULL}, 0,0 }


struct  _EspHostedCmdGetMode
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_GET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_get_mode__descriptor) \
     }


struct  _EspHostedRespGetMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mode;
  int32_t mode;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_GET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_get_mode__descriptor) \
    , 0,0, 0,0 }


struct  _EspHostedCmdSetMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mode;
  int32_t mode;
};
#define ESP_HOSTED_CMD_SET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_set_mode__descriptor) \
    , 0,0 }


struct  _EspHostedRespSetMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_SET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_set_mode__descriptor) \
    , 0,0 }


struct  _EspHostedCmdGetStatus
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_get_status__descriptor) \
     }


struct  _EspHostedRespGetStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_get_status__descriptor) \
    , 0,0 }


struct  _EspHostedCmdSetMacAddress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mac;
  ProtobufCBinaryData mac;
  protobuf_c_boolean has_mode;
  int32_t mode;
};
#define ESP_HOSTED_CMD_SET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_set_mac_address__descriptor) \
    , 0,{0,NULL}, 0,0 }


struct  _EspHostedRespSetMacAddress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_SET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_set_mac_address__descriptor) \
    , 0,0 }


struct  _EspHostedCmdGetAPConfig
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_GET_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_get_apconfig__descriptor) \
     }


struct  _EspHostedRespGetAPConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ssid;
  ProtobufCBinaryData ssid;
  protobuf_c_boolean has_bssid;
  ProtobufCBinaryData bssid;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  protobuf_c_boolean has_chnl;
  int32_t chnl;
  protobuf_c_boolean has_ecn;
  EspHostedEncryptionMode ecn;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_GET_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_get_apconfig__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0 }


struct  _EspHostedCmdSetAPConfig
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  char *bssid;
  protobuf_c_boolean has_is_wpa3_supported;
  protobuf_c_boolean is_wpa3_supported;
  protobuf_c_boolean has_listen_interval;
  int32_t listen_interval;
};
#define ESP_HOSTED_CMD_SET_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_set_apconfig__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0 }


struct  _EspHostedRespSetAPConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_SET_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_set_apconfig__descriptor) \
    , 0,0 }


struct  _EspHostedCmdGetSoftAPConfig
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_GET_SOFT_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_get_soft_apconfig__descriptor) \
     }


struct  _EspHostedRespGetSoftAPConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ssid;
  ProtobufCBinaryData ssid;
  protobuf_c_boolean has_pwd;
  ProtobufCBinaryData pwd;
  protobuf_c_boolean has_chnl;
  int32_t chnl;
  protobuf_c_boolean has_ecn;
  EspHostedEncryptionMode ecn;
  protobuf_c_boolean has_max_conn;
  int32_t max_conn;
  protobuf_c_boolean has_ssid_hidden;
  protobuf_c_boolean ssid_hidden;
  protobuf_c_boolean has_bw;
  int32_t bw;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_GET_SOFT_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_get_soft_apconfig__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _EspHostedCmdSetSoftAPConfig
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  protobuf_c_boolean has_chnl;
  int32_t chnl;
  protobuf_c_boolean has_ecn;
  EspHostedEncryptionMode ecn;
  protobuf_c_boolean has_max_conn;
  int32_t max_conn;
  protobuf_c_boolean has_ssid_hidden;
  protobuf_c_boolean ssid_hidden;
  protobuf_c_boolean has_bw;
  int32_t bw;
};
#define ESP_HOSTED_CMD_SET_SOFT_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_set_soft_apconfig__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _EspHostedRespSetSoftAPConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_SET_SOFT_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_set_soft_apconfig__descriptor) \
    , 0,0 }


struct  _EspHostedScanResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ssid;
  ProtobufCBinaryData ssid;
  protobuf_c_boolean has_chnl;
  uint32_t chnl;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  protobuf_c_boolean has_bssid;
  ProtobufCBinaryData bssid;
  protobuf_c_boolean has_ecn;
  EspHostedEncryptionMode ecn;
};
#define ESP_HOSTED_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_scan_result__descriptor) \
    , 0,{0,NULL}, 0,0, 0,0, 0,{0,NULL}, 0,0 }


struct  _EspHostedCmdScanResult
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_scan_result__descriptor) \
     }


struct  _EspHostedRespScanResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_count;
  uint32_t count;
  size_t n_entries;
  EspHostedScanResult **entries;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_scan_result__descriptor) \
    , 0,0, 0,NULL, 0,0 }


struct  _EspHostedConnectedSTAList
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mac;
  ProtobufCBinaryData mac;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
};
#define ESP_HOSTED_CONNECTED_STALIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_connected_stalist__descriptor) \
    , 0,{0,NULL}, 0,0 }


struct  _EspHostedCmdConnectedSTA
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_CONNECTED_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_connected_sta__descriptor) \
     }


struct  _EspHostedRespConnectedSTA
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num;
  uint32_t num;
  size_t n_stations;
  EspHostedConnectedSTAList **stations;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_CONNECTED_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_connected_sta__descriptor) \
    , 0,0, 0,NULL, 0,0 }


struct  _EspHostedCmdOTABegin
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_OTABEGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_otabegin__descriptor) \
     }


struct  _EspHostedRespOTABegin
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_OTABEGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_otabegin__descriptor) \
    , 0,0 }


struct  _EspHostedCmdOTAWrite
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ota_data;
  ProtobufCBinaryData ota_data;
};
#define ESP_HOSTED_CMD_OTAWRITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_otawrite__descriptor) \
    , 0,{0,NULL} }


struct  _EspHostedRespOTAWrite
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_OTAWRITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_otawrite__descriptor) \
    , 0,0 }


struct  _EspHostedCmdOTAEnd
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_OTAEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_otaend__descriptor) \
     }


struct  _EspHostedRespOTAEnd
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_OTAEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_otaend__descriptor) \
    , 0,0 }


struct  _EspHostedCmdSetVendorSpecificIE
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable;
  protobuf_c_boolean enable;
  protobuf_c_boolean has_type;
  EspHostedVendorIEType type;
  protobuf_c_boolean has_idx;
  EspHostedIEID idx;
  protobuf_c_boolean has_vendor_ie_data;
  ProtobufCBinaryData vendor_ie_data;
};
#define ESP_HOSTED_CMD_SET_VENDOR_SPECIFIC_IE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_set_vendor_specific_ie__descriptor) \
    , 0,0, 0,0, 0,0, 0,{0,NULL} }


struct  _EspHostedRespSetVendorSpecificIE
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_SET_VENDOR_SPECIFIC_IE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_set_vendor_specific_ie__descriptor) \
    , 0,0 }


struct  _EspHostedCmdSetWiFiMAXTXPower
{
  ProtobufCMessage base;
  protobuf_c_boolean has_wifi_max_tx_power;
  int32_t wifi_max_tx_power;
};
#define ESP_HOSTED_CMD_SET_WI_FI_MAXTXPOWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_set_wi_fi_maxtxpower__descriptor) \
    , 0,0 }


struct  _EspHostedRespSetWiFiMAXTXPower
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_SET_WI_FI_MAXTXPOWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_set_wi_fi_maxtxpower__descriptor) \
    , 0,0 }


struct  _EspHostedCmdGetWiFiCurrTXPower
{
  ProtobufCMessage base;
};
#define ESP_HOSTED_CMD_GET_WI_FI_CURR_TXPOWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_get_wi_fi_curr_txpower__descriptor) \
     }


struct  _EspHostedRespGetWiFiCurrTXPower
{
  ProtobufCMessage base;
  protobuf_c_boolean has_wifi_curr_tx_power;
  int32_t wifi_curr_tx_power;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_GET_WI_FI_CURR_TXPOWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_get_wi_fi_curr_txpower__descriptor) \
    , 0,0, 0,0 }


struct  _EspHostedCmdGetMadMachinePriv
{
  ProtobufCMessage base;
  EspHostedMadMachinePrivType type;
};
#define ESP_HOSTED_CMD_GET_MADMACHINE_PRIV__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_get_madmachine_priv__descriptor) \
     0 }


struct  _EspHostedRespGetMadMachinePriv
{
  ProtobufCMessage base;
  EspHostedMadMachinePrivType type;
  ProtobufCBinaryData data;
  int32_t resp;
};
#define ESP_HOSTED_RESP_GET_MADMACHINE_PRIV__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_get_madmachine_priv__descriptor) \
    , 0, {0,NULL}, 0 }


struct  _EspHostedCmdSetMadMachinePriv
{
  ProtobufCMessage base;
  EspHostedMadMachinePrivType type;
  ProtobufCBinaryData data;
};
#define ESP_HOSTED_CMD_SET_MADMACHINE_PRIV__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_cmd_set_madmachine_priv__descriptor) \
    , 0, {0,NULL}, 0 }
    
struct	_EspHostedRespSetMadMachinePriv
{
  ProtobufCMessage base;
  protobuf_c_boolean has_resp;
  int32_t resp;
};
#define ESP_HOSTED_RESP_SET_MADMACHINE_PRIV__INIT \
	 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_resp_set_madmachine_priv__descriptor) \
		, 0,0 }



typedef enum {
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD__NOT_SET = 0,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_MAC_ADDRESS = 10,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_MAC_ADDRESS = 11,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_WIFI_MODE = 12,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_WIFI_MODE = 13,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_WIFI_MODE = 14,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_WIFI_MODE = 15,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_AP_CONFIG = 16,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_AP_CONFIG = 17,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_AP_CONFIG = 18,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_AP_CONFIG = 19,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_SOFTAP_CONFIG = 20,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_SOFTAP_CONFIG = 21,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_SOFTAP_CONFIG = 22,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_SOFTAP_CONFIG = 23,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_DISCONNECT_AP = 24,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_DISCONNECT_AP = 25,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_STOP_SOFTAP = 26,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_STOP_SOFTAP = 27,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SCAN_AP_LIST = 28,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SCAN_AP_LIST = 29,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_CONNECTED_STAS_LIST = 30,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_CONNECTED_STAS_LIST = 31,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_MAC_ADDRESS = 32,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_MAC_ADDRESS = 33,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_POWER_SAVE_MODE = 34,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_POWER_SAVE_MODE = 35,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_POWER_SAVE_MODE = 36,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_POWER_SAVE_MODE = 37,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_OTA_BEGIN = 38,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_OTA_BEGIN = 39,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_OTA_WRITE = 40,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_OTA_WRITE = 41,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_OTA_END = 42,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_OTA_END = 43,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_VENDOR_SPECIFIC_IE = 44,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_VENDOR_SPECIFIC_IE = 45,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_WIFI_MAX_TX_POWER = 46,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_WIFI_MAX_TX_POWER = 47,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_WIFI_CURR_TX_POWER = 48,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_WIFI_CURR_TX_POWER = 49,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_MADMACHINE_PRIV = 50,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_MADMACHINE_PRIV = 51,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_MADMACHINE_PRIV = 52,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_MADMACHINE_PRIV = 53,
} EspHostedConfigPayload__PayloadCase;

struct  _EspHostedConfigPayload
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msg;
  EspHostedConfigMsgType msg;
  EspHostedConfigPayload__PayloadCase payload_case;
  union {
    EspHostedCmdGetMacAddress *cmd_get_mac_address;
    EspHostedRespGetMacAddress *resp_get_mac_address;
    EspHostedCmdGetMode *cmd_get_wifi_mode;
    EspHostedRespGetMode *resp_get_wifi_mode;
    EspHostedCmdSetMode *cmd_set_wifi_mode;
    EspHostedRespSetMode *resp_set_wifi_mode;
    EspHostedCmdGetAPConfig *cmd_get_ap_config;
    EspHostedRespGetAPConfig *resp_get_ap_config;
    EspHostedCmdSetAPConfig *cmd_set_ap_config;
    EspHostedRespSetAPConfig *resp_set_ap_config;
    EspHostedCmdGetSoftAPConfig *cmd_get_softap_config;
    EspHostedRespGetSoftAPConfig *resp_get_softap_config;
    EspHostedCmdSetSoftAPConfig *cmd_set_softap_config;
    EspHostedRespSetSoftAPConfig *resp_set_softap_config;
    EspHostedCmdGetStatus *cmd_disconnect_ap;
    EspHostedRespGetStatus *resp_disconnect_ap;
    EspHostedCmdGetStatus *cmd_stop_softap;
    EspHostedRespGetStatus *resp_stop_softap;
    EspHostedCmdScanResult *cmd_scan_ap_list;
    EspHostedRespScanResult *resp_scan_ap_list;
    EspHostedCmdConnectedSTA *cmd_connected_stas_list;
    EspHostedRespConnectedSTA *resp_connected_stas_list;
    EspHostedCmdSetMacAddress *cmd_set_mac_address;
    EspHostedRespSetMacAddress *resp_set_mac_address;
    EspHostedCmdSetMode *cmd_set_power_save_mode;
    EspHostedRespSetMode *resp_set_power_save_mode;
    EspHostedCmdGetMode *cmd_get_power_save_mode;
    EspHostedRespGetMode *resp_get_power_save_mode;
    EspHostedCmdOTABegin *cmd_ota_begin;
    EspHostedRespOTABegin *resp_ota_begin;
    EspHostedCmdOTAWrite *cmd_ota_write;
    EspHostedRespOTAWrite *resp_ota_write;
    EspHostedCmdOTAEnd *cmd_ota_end;
    EspHostedRespOTAEnd *resp_ota_end;
    EspHostedCmdSetVendorSpecificIE *cmd_set_vendor_specific_ie;
    EspHostedRespSetVendorSpecificIE *resp_set_vendor_specific_ie;
    EspHostedCmdSetWiFiMAXTXPower *cmd_set_wifi_max_tx_power;
    EspHostedRespSetWiFiMAXTXPower *resp_set_wifi_max_tx_power;
    EspHostedCmdGetWiFiCurrTXPower *cmd_get_wifi_curr_tx_power;
    EspHostedRespGetWiFiCurrTXPower *resp_get_wifi_curr_tx_power;
	EspHostedCmdGetMadMachinePriv *cmd_get_madmachine_priv;
	EspHostedRespGetMadMachinePriv *resp_get_madmachine_priv;
	EspHostedCmdSetMadMachinePriv *cmd_set_madmachine_priv;
	EspHostedRespSetMadMachinePriv *resp_set_madmachine_priv;
  };
};
#define ESP_HOSTED_CONFIG_PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_config_payload__descriptor) \
    , 0,0, ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD__NOT_SET, {0} }


/* EspHostedCmdGetMacAddress methods */
void   esp_hosted_cmd_get_mac_address__init
                     (EspHostedCmdGetMacAddress         *message);
size_t esp_hosted_cmd_get_mac_address__get_packed_size
                     (const EspHostedCmdGetMacAddress   *message);
size_t esp_hosted_cmd_get_mac_address__pack
                     (const EspHostedCmdGetMacAddress   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_get_mac_address__pack_to_buffer
                     (const EspHostedCmdGetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdGetMacAddress *
       esp_hosted_cmd_get_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_get_mac_address__free_unpacked
                     (EspHostedCmdGetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespGetMacAddress methods */
void   esp_hosted_resp_get_mac_address__init
                     (EspHostedRespGetMacAddress         *message);
size_t esp_hosted_resp_get_mac_address__get_packed_size
                     (const EspHostedRespGetMacAddress   *message);
size_t esp_hosted_resp_get_mac_address__pack
                     (const EspHostedRespGetMacAddress   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_get_mac_address__pack_to_buffer
                     (const EspHostedRespGetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespGetMacAddress *
       esp_hosted_resp_get_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_get_mac_address__free_unpacked
                     (EspHostedRespGetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdGetMode methods */
void   esp_hosted_cmd_get_mode__init
                     (EspHostedCmdGetMode         *message);
size_t esp_hosted_cmd_get_mode__get_packed_size
                     (const EspHostedCmdGetMode   *message);
size_t esp_hosted_cmd_get_mode__pack
                     (const EspHostedCmdGetMode   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_get_mode__pack_to_buffer
                     (const EspHostedCmdGetMode   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdGetMode *
       esp_hosted_cmd_get_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_get_mode__free_unpacked
                     (EspHostedCmdGetMode *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespGetMode methods */
void   esp_hosted_resp_get_mode__init
                     (EspHostedRespGetMode         *message);
size_t esp_hosted_resp_get_mode__get_packed_size
                     (const EspHostedRespGetMode   *message);
size_t esp_hosted_resp_get_mode__pack
                     (const EspHostedRespGetMode   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_get_mode__pack_to_buffer
                     (const EspHostedRespGetMode   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespGetMode *
       esp_hosted_resp_get_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_get_mode__free_unpacked
                     (EspHostedRespGetMode *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdSetMode methods */
void   esp_hosted_cmd_set_mode__init
                     (EspHostedCmdSetMode         *message);
size_t esp_hosted_cmd_set_mode__get_packed_size
                     (const EspHostedCmdSetMode   *message);
size_t esp_hosted_cmd_set_mode__pack
                     (const EspHostedCmdSetMode   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_set_mode__pack_to_buffer
                     (const EspHostedCmdSetMode   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdSetMode *
       esp_hosted_cmd_set_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_set_mode__free_unpacked
                     (EspHostedCmdSetMode *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespSetMode methods */
void   esp_hosted_resp_set_mode__init
                     (EspHostedRespSetMode         *message);
size_t esp_hosted_resp_set_mode__get_packed_size
                     (const EspHostedRespSetMode   *message);
size_t esp_hosted_resp_set_mode__pack
                     (const EspHostedRespSetMode   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_set_mode__pack_to_buffer
                     (const EspHostedRespSetMode   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespSetMode *
       esp_hosted_resp_set_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_set_mode__free_unpacked
                     (EspHostedRespSetMode *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdGetStatus methods */
void   esp_hosted_cmd_get_status__init
                     (EspHostedCmdGetStatus         *message);
size_t esp_hosted_cmd_get_status__get_packed_size
                     (const EspHostedCmdGetStatus   *message);
size_t esp_hosted_cmd_get_status__pack
                     (const EspHostedCmdGetStatus   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_get_status__pack_to_buffer
                     (const EspHostedCmdGetStatus   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdGetStatus *
       esp_hosted_cmd_get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_get_status__free_unpacked
                     (EspHostedCmdGetStatus *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespGetStatus methods */
void   esp_hosted_resp_get_status__init
                     (EspHostedRespGetStatus         *message);
size_t esp_hosted_resp_get_status__get_packed_size
                     (const EspHostedRespGetStatus   *message);
size_t esp_hosted_resp_get_status__pack
                     (const EspHostedRespGetStatus   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_get_status__pack_to_buffer
                     (const EspHostedRespGetStatus   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespGetStatus *
       esp_hosted_resp_get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_get_status__free_unpacked
                     (EspHostedRespGetStatus *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdSetMacAddress methods */
void   esp_hosted_cmd_set_mac_address__init
                     (EspHostedCmdSetMacAddress         *message);
size_t esp_hosted_cmd_set_mac_address__get_packed_size
                     (const EspHostedCmdSetMacAddress   *message);
size_t esp_hosted_cmd_set_mac_address__pack
                     (const EspHostedCmdSetMacAddress   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_set_mac_address__pack_to_buffer
                     (const EspHostedCmdSetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdSetMacAddress *
       esp_hosted_cmd_set_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_set_mac_address__free_unpacked
                     (EspHostedCmdSetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespSetMacAddress methods */
void   esp_hosted_resp_set_mac_address__init
                     (EspHostedRespSetMacAddress         *message);
size_t esp_hosted_resp_set_mac_address__get_packed_size
                     (const EspHostedRespSetMacAddress   *message);
size_t esp_hosted_resp_set_mac_address__pack
                     (const EspHostedRespSetMacAddress   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_set_mac_address__pack_to_buffer
                     (const EspHostedRespSetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespSetMacAddress *
       esp_hosted_resp_set_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_set_mac_address__free_unpacked
                     (EspHostedRespSetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdGetAPConfig methods */
void   esp_hosted_cmd_get_apconfig__init
                     (EspHostedCmdGetAPConfig         *message);
size_t esp_hosted_cmd_get_apconfig__get_packed_size
                     (const EspHostedCmdGetAPConfig   *message);
size_t esp_hosted_cmd_get_apconfig__pack
                     (const EspHostedCmdGetAPConfig   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_get_apconfig__pack_to_buffer
                     (const EspHostedCmdGetAPConfig   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdGetAPConfig *
       esp_hosted_cmd_get_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_get_apconfig__free_unpacked
                     (EspHostedCmdGetAPConfig *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespGetAPConfig methods */
void   esp_hosted_resp_get_apconfig__init
                     (EspHostedRespGetAPConfig         *message);
size_t esp_hosted_resp_get_apconfig__get_packed_size
                     (const EspHostedRespGetAPConfig   *message);
size_t esp_hosted_resp_get_apconfig__pack
                     (const EspHostedRespGetAPConfig   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_get_apconfig__pack_to_buffer
                     (const EspHostedRespGetAPConfig   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespGetAPConfig *
       esp_hosted_resp_get_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_get_apconfig__free_unpacked
                     (EspHostedRespGetAPConfig *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdSetAPConfig methods */
void   esp_hosted_cmd_set_apconfig__init
                     (EspHostedCmdSetAPConfig         *message);
size_t esp_hosted_cmd_set_apconfig__get_packed_size
                     (const EspHostedCmdSetAPConfig   *message);
size_t esp_hosted_cmd_set_apconfig__pack
                     (const EspHostedCmdSetAPConfig   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_set_apconfig__pack_to_buffer
                     (const EspHostedCmdSetAPConfig   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdSetAPConfig *
       esp_hosted_cmd_set_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_set_apconfig__free_unpacked
                     (EspHostedCmdSetAPConfig *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespSetAPConfig methods */
void   esp_hosted_resp_set_apconfig__init
                     (EspHostedRespSetAPConfig         *message);
size_t esp_hosted_resp_set_apconfig__get_packed_size
                     (const EspHostedRespSetAPConfig   *message);
size_t esp_hosted_resp_set_apconfig__pack
                     (const EspHostedRespSetAPConfig   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_set_apconfig__pack_to_buffer
                     (const EspHostedRespSetAPConfig   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespSetAPConfig *
       esp_hosted_resp_set_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_set_apconfig__free_unpacked
                     (EspHostedRespSetAPConfig *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdGetSoftAPConfig methods */
void   esp_hosted_cmd_get_soft_apconfig__init
                     (EspHostedCmdGetSoftAPConfig         *message);
size_t esp_hosted_cmd_get_soft_apconfig__get_packed_size
                     (const EspHostedCmdGetSoftAPConfig   *message);
size_t esp_hosted_cmd_get_soft_apconfig__pack
                     (const EspHostedCmdGetSoftAPConfig   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_get_soft_apconfig__pack_to_buffer
                     (const EspHostedCmdGetSoftAPConfig   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdGetSoftAPConfig *
       esp_hosted_cmd_get_soft_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_get_soft_apconfig__free_unpacked
                     (EspHostedCmdGetSoftAPConfig *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespGetSoftAPConfig methods */
void   esp_hosted_resp_get_soft_apconfig__init
                     (EspHostedRespGetSoftAPConfig         *message);
size_t esp_hosted_resp_get_soft_apconfig__get_packed_size
                     (const EspHostedRespGetSoftAPConfig   *message);
size_t esp_hosted_resp_get_soft_apconfig__pack
                     (const EspHostedRespGetSoftAPConfig   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_get_soft_apconfig__pack_to_buffer
                     (const EspHostedRespGetSoftAPConfig   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespGetSoftAPConfig *
       esp_hosted_resp_get_soft_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_get_soft_apconfig__free_unpacked
                     (EspHostedRespGetSoftAPConfig *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdSetSoftAPConfig methods */
void   esp_hosted_cmd_set_soft_apconfig__init
                     (EspHostedCmdSetSoftAPConfig         *message);
size_t esp_hosted_cmd_set_soft_apconfig__get_packed_size
                     (const EspHostedCmdSetSoftAPConfig   *message);
size_t esp_hosted_cmd_set_soft_apconfig__pack
                     (const EspHostedCmdSetSoftAPConfig   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_set_soft_apconfig__pack_to_buffer
                     (const EspHostedCmdSetSoftAPConfig   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdSetSoftAPConfig *
       esp_hosted_cmd_set_soft_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_set_soft_apconfig__free_unpacked
                     (EspHostedCmdSetSoftAPConfig *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespSetSoftAPConfig methods */
void   esp_hosted_resp_set_soft_apconfig__init
                     (EspHostedRespSetSoftAPConfig         *message);
size_t esp_hosted_resp_set_soft_apconfig__get_packed_size
                     (const EspHostedRespSetSoftAPConfig   *message);
size_t esp_hosted_resp_set_soft_apconfig__pack
                     (const EspHostedRespSetSoftAPConfig   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_set_soft_apconfig__pack_to_buffer
                     (const EspHostedRespSetSoftAPConfig   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespSetSoftAPConfig *
       esp_hosted_resp_set_soft_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_set_soft_apconfig__free_unpacked
                     (EspHostedRespSetSoftAPConfig *message,
                      ProtobufCAllocator *allocator);
/* EspHostedScanResult methods */
void   esp_hosted_scan_result__init
                     (EspHostedScanResult         *message);
size_t esp_hosted_scan_result__get_packed_size
                     (const EspHostedScanResult   *message);
size_t esp_hosted_scan_result__pack
                     (const EspHostedScanResult   *message,
                      uint8_t             *out);
size_t esp_hosted_scan_result__pack_to_buffer
                     (const EspHostedScanResult   *message,
                      ProtobufCBuffer     *buffer);
EspHostedScanResult *
       esp_hosted_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_scan_result__free_unpacked
                     (EspHostedScanResult *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdScanResult methods */
void   esp_hosted_cmd_scan_result__init
                     (EspHostedCmdScanResult         *message);
size_t esp_hosted_cmd_scan_result__get_packed_size
                     (const EspHostedCmdScanResult   *message);
size_t esp_hosted_cmd_scan_result__pack
                     (const EspHostedCmdScanResult   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_scan_result__pack_to_buffer
                     (const EspHostedCmdScanResult   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdScanResult *
       esp_hosted_cmd_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_scan_result__free_unpacked
                     (EspHostedCmdScanResult *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespScanResult methods */
void   esp_hosted_resp_scan_result__init
                     (EspHostedRespScanResult         *message);
size_t esp_hosted_resp_scan_result__get_packed_size
                     (const EspHostedRespScanResult   *message);
size_t esp_hosted_resp_scan_result__pack
                     (const EspHostedRespScanResult   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_scan_result__pack_to_buffer
                     (const EspHostedRespScanResult   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespScanResult *
       esp_hosted_resp_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_scan_result__free_unpacked
                     (EspHostedRespScanResult *message,
                      ProtobufCAllocator *allocator);
/* EspHostedConnectedSTAList methods */
void   esp_hosted_connected_stalist__init
                     (EspHostedConnectedSTAList         *message);
size_t esp_hosted_connected_stalist__get_packed_size
                     (const EspHostedConnectedSTAList   *message);
size_t esp_hosted_connected_stalist__pack
                     (const EspHostedConnectedSTAList   *message,
                      uint8_t             *out);
size_t esp_hosted_connected_stalist__pack_to_buffer
                     (const EspHostedConnectedSTAList   *message,
                      ProtobufCBuffer     *buffer);
EspHostedConnectedSTAList *
       esp_hosted_connected_stalist__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_connected_stalist__free_unpacked
                     (EspHostedConnectedSTAList *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdConnectedSTA methods */
void   esp_hosted_cmd_connected_sta__init
                     (EspHostedCmdConnectedSTA         *message);
size_t esp_hosted_cmd_connected_sta__get_packed_size
                     (const EspHostedCmdConnectedSTA   *message);
size_t esp_hosted_cmd_connected_sta__pack
                     (const EspHostedCmdConnectedSTA   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_connected_sta__pack_to_buffer
                     (const EspHostedCmdConnectedSTA   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdConnectedSTA *
       esp_hosted_cmd_connected_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_connected_sta__free_unpacked
                     (EspHostedCmdConnectedSTA *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespConnectedSTA methods */
void   esp_hosted_resp_connected_sta__init
                     (EspHostedRespConnectedSTA         *message);
size_t esp_hosted_resp_connected_sta__get_packed_size
                     (const EspHostedRespConnectedSTA   *message);
size_t esp_hosted_resp_connected_sta__pack
                     (const EspHostedRespConnectedSTA   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_connected_sta__pack_to_buffer
                     (const EspHostedRespConnectedSTA   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespConnectedSTA *
       esp_hosted_resp_connected_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_connected_sta__free_unpacked
                     (EspHostedRespConnectedSTA *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdOTABegin methods */
void   esp_hosted_cmd_otabegin__init
                     (EspHostedCmdOTABegin         *message);
size_t esp_hosted_cmd_otabegin__get_packed_size
                     (const EspHostedCmdOTABegin   *message);
size_t esp_hosted_cmd_otabegin__pack
                     (const EspHostedCmdOTABegin   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_otabegin__pack_to_buffer
                     (const EspHostedCmdOTABegin   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdOTABegin *
       esp_hosted_cmd_otabegin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_otabegin__free_unpacked
                     (EspHostedCmdOTABegin *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespOTABegin methods */
void   esp_hosted_resp_otabegin__init
                     (EspHostedRespOTABegin         *message);
size_t esp_hosted_resp_otabegin__get_packed_size
                     (const EspHostedRespOTABegin   *message);
size_t esp_hosted_resp_otabegin__pack
                     (const EspHostedRespOTABegin   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_otabegin__pack_to_buffer
                     (const EspHostedRespOTABegin   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespOTABegin *
       esp_hosted_resp_otabegin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_otabegin__free_unpacked
                     (EspHostedRespOTABegin *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdOTAWrite methods */
void   esp_hosted_cmd_otawrite__init
                     (EspHostedCmdOTAWrite         *message);
size_t esp_hosted_cmd_otawrite__get_packed_size
                     (const EspHostedCmdOTAWrite   *message);
size_t esp_hosted_cmd_otawrite__pack
                     (const EspHostedCmdOTAWrite   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_otawrite__pack_to_buffer
                     (const EspHostedCmdOTAWrite   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdOTAWrite *
       esp_hosted_cmd_otawrite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_otawrite__free_unpacked
                     (EspHostedCmdOTAWrite *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespOTAWrite methods */
void   esp_hosted_resp_otawrite__init
                     (EspHostedRespOTAWrite         *message);
size_t esp_hosted_resp_otawrite__get_packed_size
                     (const EspHostedRespOTAWrite   *message);
size_t esp_hosted_resp_otawrite__pack
                     (const EspHostedRespOTAWrite   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_otawrite__pack_to_buffer
                     (const EspHostedRespOTAWrite   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespOTAWrite *
       esp_hosted_resp_otawrite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_otawrite__free_unpacked
                     (EspHostedRespOTAWrite *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdOTAEnd methods */
void   esp_hosted_cmd_otaend__init
                     (EspHostedCmdOTAEnd         *message);
size_t esp_hosted_cmd_otaend__get_packed_size
                     (const EspHostedCmdOTAEnd   *message);
size_t esp_hosted_cmd_otaend__pack
                     (const EspHostedCmdOTAEnd   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_otaend__pack_to_buffer
                     (const EspHostedCmdOTAEnd   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdOTAEnd *
       esp_hosted_cmd_otaend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_otaend__free_unpacked
                     (EspHostedCmdOTAEnd *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespOTAEnd methods */
void   esp_hosted_resp_otaend__init
                     (EspHostedRespOTAEnd         *message);
size_t esp_hosted_resp_otaend__get_packed_size
                     (const EspHostedRespOTAEnd   *message);
size_t esp_hosted_resp_otaend__pack
                     (const EspHostedRespOTAEnd   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_otaend__pack_to_buffer
                     (const EspHostedRespOTAEnd   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespOTAEnd *
       esp_hosted_resp_otaend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_otaend__free_unpacked
                     (EspHostedRespOTAEnd *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdSetVendorSpecificIE methods */
void   esp_hosted_cmd_set_vendor_specific_ie__init
                     (EspHostedCmdSetVendorSpecificIE         *message);
size_t esp_hosted_cmd_set_vendor_specific_ie__get_packed_size
                     (const EspHostedCmdSetVendorSpecificIE   *message);
size_t esp_hosted_cmd_set_vendor_specific_ie__pack
                     (const EspHostedCmdSetVendorSpecificIE   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_set_vendor_specific_ie__pack_to_buffer
                     (const EspHostedCmdSetVendorSpecificIE   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdSetVendorSpecificIE *
       esp_hosted_cmd_set_vendor_specific_ie__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_set_vendor_specific_ie__free_unpacked
                     (EspHostedCmdSetVendorSpecificIE *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespSetVendorSpecificIE methods */
void   esp_hosted_resp_set_vendor_specific_ie__init
                     (EspHostedRespSetVendorSpecificIE         *message);
size_t esp_hosted_resp_set_vendor_specific_ie__get_packed_size
                     (const EspHostedRespSetVendorSpecificIE   *message);
size_t esp_hosted_resp_set_vendor_specific_ie__pack
                     (const EspHostedRespSetVendorSpecificIE   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_set_vendor_specific_ie__pack_to_buffer
                     (const EspHostedRespSetVendorSpecificIE   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespSetVendorSpecificIE *
       esp_hosted_resp_set_vendor_specific_ie__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_set_vendor_specific_ie__free_unpacked
                     (EspHostedRespSetVendorSpecificIE *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdSetWiFiMAXTXPower methods */
void   esp_hosted_cmd_set_wi_fi_maxtxpower__init
                     (EspHostedCmdSetWiFiMAXTXPower         *message);
size_t esp_hosted_cmd_set_wi_fi_maxtxpower__get_packed_size
                     (const EspHostedCmdSetWiFiMAXTXPower   *message);
size_t esp_hosted_cmd_set_wi_fi_maxtxpower__pack
                     (const EspHostedCmdSetWiFiMAXTXPower   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_set_wi_fi_maxtxpower__pack_to_buffer
                     (const EspHostedCmdSetWiFiMAXTXPower   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdSetWiFiMAXTXPower *
       esp_hosted_cmd_set_wi_fi_maxtxpower__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_set_wi_fi_maxtxpower__free_unpacked
                     (EspHostedCmdSetWiFiMAXTXPower *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespSetWiFiMAXTXPower methods */
void   esp_hosted_resp_set_wi_fi_maxtxpower__init
                     (EspHostedRespSetWiFiMAXTXPower         *message);
size_t esp_hosted_resp_set_wi_fi_maxtxpower__get_packed_size
                     (const EspHostedRespSetWiFiMAXTXPower   *message);
size_t esp_hosted_resp_set_wi_fi_maxtxpower__pack
                     (const EspHostedRespSetWiFiMAXTXPower   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_set_wi_fi_maxtxpower__pack_to_buffer
                     (const EspHostedRespSetWiFiMAXTXPower   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespSetWiFiMAXTXPower *
       esp_hosted_resp_set_wi_fi_maxtxpower__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_set_wi_fi_maxtxpower__free_unpacked
                     (EspHostedRespSetWiFiMAXTXPower *message,
                      ProtobufCAllocator *allocator);
/* EspHostedCmdGetWiFiCurrTXPower methods */
void   esp_hosted_cmd_get_wi_fi_curr_txpower__init
                     (EspHostedCmdGetWiFiCurrTXPower         *message);
size_t esp_hosted_cmd_get_wi_fi_curr_txpower__get_packed_size
                     (const EspHostedCmdGetWiFiCurrTXPower   *message);
size_t esp_hosted_cmd_get_wi_fi_curr_txpower__pack
                     (const EspHostedCmdGetWiFiCurrTXPower   *message,
                      uint8_t             *out);
size_t esp_hosted_cmd_get_wi_fi_curr_txpower__pack_to_buffer
                     (const EspHostedCmdGetWiFiCurrTXPower   *message,
                      ProtobufCBuffer     *buffer);
EspHostedCmdGetWiFiCurrTXPower *
       esp_hosted_cmd_get_wi_fi_curr_txpower__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_cmd_get_wi_fi_curr_txpower__free_unpacked
                     (EspHostedCmdGetWiFiCurrTXPower *message,
                      ProtobufCAllocator *allocator);
/* EspHostedRespGetWiFiCurrTXPower methods */
void   esp_hosted_resp_get_wi_fi_curr_txpower__init
                     (EspHostedRespGetWiFiCurrTXPower         *message);
size_t esp_hosted_resp_get_wi_fi_curr_txpower__get_packed_size
                     (const EspHostedRespGetWiFiCurrTXPower   *message);
size_t esp_hosted_resp_get_wi_fi_curr_txpower__pack
                     (const EspHostedRespGetWiFiCurrTXPower   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_get_wi_fi_curr_txpower__pack_to_buffer
                     (const EspHostedRespGetWiFiCurrTXPower   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespGetWiFiCurrTXPower *
       esp_hosted_resp_get_wi_fi_curr_txpower__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_get_wi_fi_curr_txpower__free_unpacked
                     (EspHostedRespGetWiFiCurrTXPower *message,
                      ProtobufCAllocator *allocator);
/* EspHostedConfigPayload methods */
void   esp_hosted_config_payload__init
                     (EspHostedConfigPayload         *message);
size_t esp_hosted_config_payload__get_packed_size
                     (const EspHostedConfigPayload   *message);
size_t esp_hosted_config_payload__pack
                     (const EspHostedConfigPayload   *message,
                      uint8_t             *out);
size_t esp_hosted_config_payload__pack_to_buffer
                     (const EspHostedConfigPayload   *message,
                      ProtobufCBuffer     *buffer);
EspHostedConfigPayload *
       esp_hosted_config_payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_config_payload__free_unpacked
                     (EspHostedConfigPayload *message,
                      ProtobufCAllocator *allocator);

/* EspHostedCmdSetMadMachinePriv methods */
void   esp_hosted_resp_set_madmachine_priv__init
                     (EspHostedRespSetMadMachinePriv         *message);
size_t esp_hosted_resp_set_madmachine_priv__get_packed_size
                     (const EspHostedRespSetMadMachinePriv   *message);
size_t esp_hosted_resp_set_madmachine_priv__pack
                     (const EspHostedRespSetMadMachinePriv   *message,
                      uint8_t             *out);
size_t esp_hosted_resp_set_madmachine_priv__pack_to_buffer
                     (const EspHostedRespSetMadMachinePriv   *message,
                      ProtobufCBuffer     *buffer);
EspHostedRespSetMadMachinePriv *
       esp_hosted_resp_set_madmachine_priv__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_resp_set_madmachine_priv__free_unpacked
                     (EspHostedRespSetMadMachinePriv *message,
                      ProtobufCAllocator *allocator);

/* --- per-message closures --- */

typedef void (*EspHostedCmdGetMacAddress_Closure)
                 (const EspHostedCmdGetMacAddress *message,
                  void *closure_data);
typedef void (*EspHostedRespGetMacAddress_Closure)
                 (const EspHostedRespGetMacAddress *message,
                  void *closure_data);
typedef void (*EspHostedCmdGetMode_Closure)
                 (const EspHostedCmdGetMode *message,
                  void *closure_data);
typedef void (*EspHostedRespGetMode_Closure)
                 (const EspHostedRespGetMode *message,
                  void *closure_data);
typedef void (*EspHostedCmdSetMode_Closure)
                 (const EspHostedCmdSetMode *message,
                  void *closure_data);
typedef void (*EspHostedRespSetMode_Closure)
                 (const EspHostedRespSetMode *message,
                  void *closure_data);
typedef void (*EspHostedCmdGetStatus_Closure)
                 (const EspHostedCmdGetStatus *message,
                  void *closure_data);
typedef void (*EspHostedRespGetStatus_Closure)
                 (const EspHostedRespGetStatus *message,
                  void *closure_data);
typedef void (*EspHostedCmdSetMacAddress_Closure)
                 (const EspHostedCmdSetMacAddress *message,
                  void *closure_data);
typedef void (*EspHostedRespSetMacAddress_Closure)
                 (const EspHostedRespSetMacAddress *message,
                  void *closure_data);
typedef void (*EspHostedCmdGetAPConfig_Closure)
                 (const EspHostedCmdGetAPConfig *message,
                  void *closure_data);
typedef void (*EspHostedRespGetAPConfig_Closure)
                 (const EspHostedRespGetAPConfig *message,
                  void *closure_data);
typedef void (*EspHostedCmdSetAPConfig_Closure)
                 (const EspHostedCmdSetAPConfig *message,
                  void *closure_data);
typedef void (*EspHostedRespSetAPConfig_Closure)
                 (const EspHostedRespSetAPConfig *message,
                  void *closure_data);
typedef void (*EspHostedCmdGetSoftAPConfig_Closure)
                 (const EspHostedCmdGetSoftAPConfig *message,
                  void *closure_data);
typedef void (*EspHostedRespGetSoftAPConfig_Closure)
                 (const EspHostedRespGetSoftAPConfig *message,
                  void *closure_data);
typedef void (*EspHostedCmdSetSoftAPConfig_Closure)
                 (const EspHostedCmdSetSoftAPConfig *message,
                  void *closure_data);
typedef void (*EspHostedRespSetSoftAPConfig_Closure)
                 (const EspHostedRespSetSoftAPConfig *message,
                  void *closure_data);
typedef void (*EspHostedScanResult_Closure)
                 (const EspHostedScanResult *message,
                  void *closure_data);
typedef void (*EspHostedCmdScanResult_Closure)
                 (const EspHostedCmdScanResult *message,
                  void *closure_data);
typedef void (*EspHostedRespScanResult_Closure)
                 (const EspHostedRespScanResult *message,
                  void *closure_data);
typedef void (*EspHostedConnectedSTAList_Closure)
                 (const EspHostedConnectedSTAList *message,
                  void *closure_data);
typedef void (*EspHostedCmdConnectedSTA_Closure)
                 (const EspHostedCmdConnectedSTA *message,
                  void *closure_data);
typedef void (*EspHostedRespConnectedSTA_Closure)
                 (const EspHostedRespConnectedSTA *message,
                  void *closure_data);
typedef void (*EspHostedCmdOTABegin_Closure)
                 (const EspHostedCmdOTABegin *message,
                  void *closure_data);
typedef void (*EspHostedRespOTABegin_Closure)
                 (const EspHostedRespOTABegin *message,
                  void *closure_data);
typedef void (*EspHostedCmdOTAWrite_Closure)
                 (const EspHostedCmdOTAWrite *message,
                  void *closure_data);
typedef void (*EspHostedRespOTAWrite_Closure)
                 (const EspHostedRespOTAWrite *message,
                  void *closure_data);
typedef void (*EspHostedCmdOTAEnd_Closure)
                 (const EspHostedCmdOTAEnd *message,
                  void *closure_data);
typedef void (*EspHostedRespOTAEnd_Closure)
                 (const EspHostedRespOTAEnd *message,
                  void *closure_data);
typedef void (*EspHostedCmdSetVendorSpecificIE_Closure)
                 (const EspHostedCmdSetVendorSpecificIE *message,
                  void *closure_data);
typedef void (*EspHostedRespSetVendorSpecificIE_Closure)
                 (const EspHostedRespSetVendorSpecificIE *message,
                  void *closure_data);
typedef void (*EspHostedCmdSetWiFiMAXTXPower_Closure)
                 (const EspHostedCmdSetWiFiMAXTXPower *message,
                  void *closure_data);
typedef void (*EspHostedRespSetWiFiMAXTXPower_Closure)
                 (const EspHostedRespSetWiFiMAXTXPower *message,
                  void *closure_data);
typedef void (*EspHostedCmdGetWiFiCurrTXPower_Closure)
                 (const EspHostedCmdGetWiFiCurrTXPower *message,
                  void *closure_data);
typedef void (*EspHostedRespGetWiFiCurrTXPower_Closure)
                 (const EspHostedRespGetWiFiCurrTXPower *message,
                  void *closure_data);
typedef void (*EspHostedConfigPayload_Closure)
                 (const EspHostedConfigPayload *message,
                  void *closure_data);

typedef void (*EspHostedCmdSetMadMachinePriv_Closure)
                 (const EspHostedCmdSetMadMachinePriv *message,
                  void *closure_data);
typedef void (*EspHostedRespGetMadMachinePriv_Closure)
                 (const EspHostedRespGetMadMachinePriv *message,
                  void *closure_data);
typedef void (*EspHostedCmdSetMadMachinePriv_Closure)
                 (const EspHostedCmdSetMadMachinePriv *message,
                  void *closure_data);
typedef void (*EspHostedRespSetMadMachinePriv_Closure)
                 (const EspHostedRespSetMadMachinePriv *message,
                  void *closure_data);




/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    esp_hosted_encryption_mode__descriptor;
extern const ProtobufCEnumDescriptor    esp_hosted_status__descriptor;
extern const ProtobufCEnumDescriptor    esp_hosted_vendor_ietype__descriptor;
extern const ProtobufCEnumDescriptor    esp_hosted_ieid__descriptor;
extern const ProtobufCEnumDescriptor    esp_hosted_config_msg_type__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_get_mac_address__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_get_mac_address__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_get_mode__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_get_mode__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_set_mode__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_set_mode__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_get_status__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_get_status__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_set_mac_address__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_set_mac_address__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_get_apconfig__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_get_apconfig__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_set_apconfig__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_set_apconfig__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_get_soft_apconfig__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_get_soft_apconfig__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_set_soft_apconfig__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_set_soft_apconfig__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_scan_result__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_scan_result__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_scan_result__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_connected_stalist__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_connected_sta__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_connected_sta__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_otabegin__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_otabegin__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_otawrite__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_otawrite__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_otaend__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_otaend__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_set_vendor_specific_ie__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_set_vendor_specific_ie__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_set_wi_fi_maxtxpower__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_set_wi_fi_maxtxpower__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_cmd_get_wi_fi_curr_txpower__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_resp_get_wi_fi_curr_txpower__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_config_payload__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED */
